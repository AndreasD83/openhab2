rule "Wohnzimmer runter"
when
    Item WohnzimmerDown changed 
then
	sendCommand(JalousieWohnzimmerGrossDown, ON)
	sendCommand(JalousieWohnzimmerKleinDown, ON)
	sendCommand(JalousieWohnzimmerTuerDown, ON)
end

rule "Wohnzimmer hoch"
when
    Item WohnzimmerUp changed 
then
	logInfo("","WohnzimmerUp an...")
	sendCommand(JalousieWohnzimmerGrossUp, ON)
	sendCommand(JalousieWohnzimmerKleinUp, ON)
	sendCommand(JalousieWohnzimmerTuerUp, ON)
end

rule "Unten runter"
when
    Item UntenDown changed 
then
	sendCommand(WohnzimmerDown, ON)
	sendCommand(JalousieKuecheDown, ON)
	val mailActions = getActions("mail","mail:smtp:gmx")
    val success = mailActions.sendMail("dieckmann.andreas@gmail.com", "Unten runter", "Alle Jalousien unten wurden herunter gefahren!")

end

rule "Unten hoch"
when
    Item UntenUp changed 
then
	sendCommand(WohnzimmerUp, ON)
	sendCommand(JalousieKuecheUp, ON)
	val mailActions = getActions("mail","mail:smtp:gmx")
    val success = mailActions.sendMail("dieckmann.andreas@gmail.com", "Unten hoch", "Alle Jalousien unten wurden hochgefahren!")

end


rule "Oben runter"
when
    Item ObenDown changed 
then
    var message = "KEINE Jalousien oben wurden heruntergefahren!"
	var subject = "Oben NICHT runter"
    if((DeactivateRules.state==OFF)){
		//sendCommand(JalousieElternDown, ON)
		sendCommand(JalousieAnnikaDown, ON)
		sendCommand(JalousieBueroDown, ON)
		message = "Alle Jalousien oben wurden heruntergefahren!"
		subject = "Oben runter"
	} 
	val mailActions = getActions("mail","mail:smtp:gmx")
    val success = mailActions.sendMail("dieckmann.andreas@gmail.com", subject, message)
	logInfo("",success)
end

rule "Oben hoch"
when
    Item ObenUp changed 
then
	//sendCommand(JalousieElternUp, ON)
	sendCommand(JalousieAnnikaUp, ON)
	sendCommand(JalousieBueroUp, ON)
end

rule "Alles hoch"
when
    Item AllUp changed 
then
	sendCommand(ObenUp, ON)
	sendCommand(UntenUp, ON)
end

rule "Alles runter"
when
    Item AllDown changed 
then
	sendCommand(ObenDown, ON)
	sendCommand(UntenDown, ON)
end

rule "oben Licht an"
when 
	Item TasterObenOn changed 
then
		if (LichtBuero.state == OFF) {
			sendCommand(LichtBuero, ON)
		}
		if (LichtAnnika.state == OFF) {
			sendCommand(LichtAnnika, ON)
		}
		if (LichtSchlafzimmer.state == OFF) {
			if (TasterSchlafzimmer.state == OFF) {
				sendCommand(TasterSchlafzimmer, ON)
			} else{
				sendCommand(TasterSchlafzimmer, OFF)
			}
		}
		if (LichtFlurOG.state == OFF) {
			if (TasterFlurOG.state == OFF) {
				sendCommand(TasterFlurOG, ON)
			} else{
				sendCommand(TasterFlurOG, OFF)
			}
		}
end

rule "oben Licht aus"
when 
	Item TasterObenOff changed 
then
		if (LichtBuero.state == ON) {
			if (TasterBuero.state == OFF) {
				sendCommand(TasterBuero, ON)
			} else{
				sendCommand(TasterBuero, OFF)
			}
		}
		if (LichtAnnika.state == ON) {
			if (TasterAnnika.state == OFF) {
				sendCommand(TasterAnnika, ON)
			} else{
				sendCommand(TasterAnnika, OFF)
			}
		}
		if (LichtSchlafzimmer.state == ON) {
			if (TasterSchlafzimmer.state == OFF) {
				sendCommand(TasterSchlafzimmer, ON)
			} else{
				sendCommand(TasterSchlafzimmer, OFF)
			}
		}
		if (LichtFlurOG.state == ON) {
			if (TasterFlurOG.state == OFF) {
				sendCommand(TasterFlurOG, ON)
			} else{
				sendCommand(TasterFlurOG, OFF)
			}
		}
end

rule "Wohnzimmer"
when 
	Item TasterWohnzimmer changed 
then
		if (TasterWohnzimmerSofaecke.state == OFF) {
			sendCommand(TasterWohnzimmerSofaecke, ON)
		} else{
			sendCommand(TasterWohnzimmerSofaecke, OFF)
		}
		if (TasterWohnzimmerMitte.state == OFF) {
			sendCommand(TasterWohnzimmerMitte, ON)
		} else{
			sendCommand(TasterWohnzimmerMitte, OFF)
		}	
end

rule "unten List"
when 
	Item TasterUnten changed 
then
		sendCommand(TasterWohnzimmer, ON)
		
		if (TasterFlurEG.state == OFF) {
			sendCommand(TasterFlurEG, ON)
		} else{
			sendCommand(TasterFlurEG, OFF)
		}	
		
		if (TasterKueche.state == OFF) {
			sendCommand(TasterKueche, ON)
		} else{
			sendCommand(TasterKueche, OFF)
		}
end